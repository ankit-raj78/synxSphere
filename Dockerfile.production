# Production Dockerfile for AWS deployment
FROM node:18-alpine AS base

# Install only what we actually need: FFmpeg for audio processing and PostgreSQL client
RUN apk add --no-cache \
    ffmpeg \
    postgresql-client \
    wget \
    dumb-init

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy package files
COPY package*.json ./

# Install dependencies
FROM base AS deps
RUN npm ci --only=production --frozen-lockfile

# Build stage
FROM base AS builder
COPY package*.json ./
RUN npm ci --frozen-lockfile

# Copy all source files
COPY . .

# Ensure public directory exists in builder stage
RUN mkdir -p public

# Verify critical files are present in builder stage
RUN ls -la start-server.sh || echo "start-server.sh not found"
RUN ls -la import-schema.sh || echo "import-schema.sh not found"

RUN npm run build

# Production stage
FROM base AS runner

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy node_modules from deps stage
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy database files and import script
COPY --from=builder --chown=nextjs:nodejs /app/database ./database
COPY --from=builder --chown=nextjs:nodejs /app/audio-tables.sql ./audio-tables.sql
COPY --from=builder --chown=nextjs:nodejs /app/import-schema.sh ./import-schema.sh
COPY --from=builder --chown=nextjs:nodejs /app/start-server.sh ./start-server.sh

# Make scripts executable
RUN chmod +x ./import-schema.sh
RUN chmod +x ./start-server.sh

# Create uploads directory
RUN mkdir -p /app/uploads && chown nextjs:nodejs /app/uploads
RUN mkdir -p /app/compositions && chown nextjs:nodejs /app/compositions

USER nextjs

EXPOSE 3000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

CMD ["./start-server.sh"]
