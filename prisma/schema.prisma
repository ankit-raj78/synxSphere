generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(cuid())
  email           String                @unique
  username        String                @unique
  password        String
  profile         Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  audioFiles      AudioFile[]
  roomMemberships RoomMembership[]
  sessions        Session[]
  userSessions    UserSession[]
  recommendations RecommendationCache[]
  interactions    UserInteraction[]
  preferences     UserPreferences?

  @@map("User")
}

model Room {
  id           String            @id @default(cuid())
  name         String
  description  String?
  isPublic     Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  creatorId    String
  audioFiles   AudioFile[]
  memberships  RoomMembership[]
  sessions     Session[]
  analytics    RoomAnalytics?
  interactions UserInteraction[]

  @@map("Room")
}

model AudioFile {
  id             String            @id @default(cuid())
  filename       String
  originalName   String
  filePath       String
  fileSize       BigInt
  mimeType       String
  isProcessed    Boolean           @default(false)
  isPublic       Boolean           @default(false)
  metadata       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String
  roomId         String?
  duration       Int?
  bitrate        Int?
  sampleRate     Int?
  channels       Int?
  format         String?
  quality        String?
  encoding       String?
  tags           Json?
  isAnalyzed     Boolean           @default(false)
  analysisStatus String            @default("pending")
  lastAnalyzed   DateTime?
  playCount      Int               @default(0)
  likeCount      Int               @default(0)
  downloadCount  Int               @default(0)
  shareCount     Int               @default(0)
  room           Room?             @relation(fields: [roomId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
  features       AudioFeatures?
  interactions   UserInteraction[]

  @@map("AudioFile")
}

model RoomMembership {
  id       String   @id @default(cuid())
  userId   String
  roomId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@map("RoomMembership")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("UserSession")
}

model Session {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  roomId      String
  creator     User     @relation(fields: [creatorId], references: [id])
  room        Room     @relation(fields: [roomId], references: [id])

  @@map("Session")
}

model AudioFeatures {
  id               String    @id @default(cuid())
  audioFileId      String    @unique
  mfccFeatures     Json?
  spectralFeatures Json?
  rhythmFeatures   Json?
  harmonicFeatures Json?
  tempo            Float?
  key              String?
  energy           Float?
  valence          Float?
  danceability     Float?
  loudness         Float?
  duration         Int?
  embeddings       Json?
  analysisVersion  String?
  processingTime   Int?
  extractedAt      DateTime  @default(now())
  confidence       Float     @default(0.0)
  audioFile        AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

  @@map("audio_features")
}

model UserInteraction {
  id          String     @id @default(cuid())
  userId      String
  roomId      String?
  audioFileId String?
  actionType  String
  timestamp   DateTime   @default(now())
  duration    Int?
  rating      Int?
  sessionId   String?
  deviceType  String?
  timeOfDay   String?
  location    String?
  metadata    Json?
  audioFile   AudioFile? @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  room        Room?      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_interactions")
}

model UserPreferences {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  genrePreferences        Json?
  explicitGenres          Json?
  tempoRange              Json?
  energyRange             Json?
  valenceRange            Json?
  loudnessRange           Json?
  danceabilityRange       Json?
  preferredRoomSizes      Json?
  activityTimes           Json?
  sessionLengthPreference Int?
  preferredRoomTypes      Json?
  discoveryMode           String   @default("balanced")
  confidenceScore         Float    @default(0.0)
  lastUpdated             DateTime @updatedAt
  interactionCount        Int      @default(0)
  learningEnabled         Boolean  @default(true)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model RoomAnalytics {
  id                   String    @id @default(cuid())
  roomId               String    @unique
  dominantGenres       Json?
  averageTempo         Float?
  averageEnergy        Float?
  averageValence       Float?
  averageDanceability  Float?
  averageLoudness      Float?
  audioDiversityScore  Float?
  totalAudioDuration   Int?
  totalSessions        Int       @default(0)
  uniqueParticipants   Int       @default(0)
  activeParticipants   Int       @default(0)
  averageSessionTime   Float?
  peakActivityTimes    Json?
  lastActivityAt       DateTime?
  likesRatio           Float?
  retentionRate        Float?
  diversityIndex       Float?
  interactionRate      Float?
  popularityScore      Float     @default(0.0)
  trendingScore        Float     @default(0.0)
  growthRate           Float     @default(0.0)
  uploadsPerDay        Float     @default(0.0)
  averageUploadQuality Float?
  contentFreshness     Float?
  lastCalculated       DateTime  @default(now())
  calculationVersion   String?   @default("1.0")
  dataQuality          Float     @default(1.0)
  room                 Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_analytics")
}

model RecommendationCache {
  id                   String   @id @default(cuid())
  userId               String
  recommendedRooms     Json
  reasoning            Json?
  totalRecommendations Int      @default(0)
  algorithmVersion     String
  contentScore         Float?
  collaborativeScore   Float?
  sessionScore         Float?
  hybridWeights        Json?
  contextData          Json?
  queryParameters      Json?
  createdAt            DateTime @default(now())
  expiresAt            DateTime
  hitCount             Int      @default(0)
  lastAccessed         DateTime @default(now())
  isValid              Boolean  @default(true)
  generationTimeMs     Int?
  cacheEfficiency      Float?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation_cache")
}

model MLModel {
  id                String    @id @default(cuid())
  name              String
  version           String
  type              String
  framework         String
  architecture      String?
  parameters        Json?
  inputShape        Json?
  outputShape       Json?
  accuracy          Float?
  precision         Float?
  recall            Float?
  f1Score           Float?
  performance       Json?
  isActive          Boolean   @default(false)
  isProduction      Boolean   @default(false)
  modelPath         String?
  apiEndpoint       String?
  deploymentConfig  Json?
  trainedOn         DateTime?
  trainingDataSize  Int?
  trainingDuration  Int?
  validationMetrics Json?
  trainingConfig    Json?
  datasetVersion    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deprecatedAt      DateTime?
  retiredAt         DateTime?
  usageCount        Int       @default(0)
  lastUsed          DateTime?
  avgInferenceTime  Float?

  @@unique([name, version])
  @@map("ml_models")
}

model RecommendationExperiment {
  id                      String    @id @default(cuid())
  name                    String
  description             String?
  algorithmA              Json
  algorithmB              Json
  trafficSplit            Float     @default(0.5)
  isActive                Boolean   @default(false)
  startDate               DateTime?
  endDate                 DateTime?
  status                  String    @default("draft")
  primaryMetric           String
  successCriteria         Json?
  results                 Json?
  statisticalSignificance Float?
  winner                  String?
  createdBy               String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@map("recommendation_experiments")
}
