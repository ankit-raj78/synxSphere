generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- User and Auth ---
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  password String   @map("password_hash")
  profile      Json     @default("{\"role\": \"user\", \"bio\": \"\", \"avatar\": \"\"}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdRooms         Room[]             @relation("RoomCreator")
  roomParticipants     RoomParticipant[]
  audioFiles           AudioFile[]
  audioTracks          AudioTrack[]
  joinRequests         JoinRequest[]
  compositions         Composition[]
  sessions             UserSession[]
  createdSessions      Session[]          @relation("SessionCreator")
  sessionParticipants  SessionParticipant[]
  messages             Message[]
  recommendations      RecommendationCache[]
  interactions         UserInteraction[]
  preferences          UserPreferences?
  studioProjects       StudioProject[]
}

// --- Room and Participation ---
model Room {
  id              String   @id @default(uuid())
  name            String
  description     String?
  genre           String?
  isLive          Boolean  @default(false) @map("is_live")
  creatorId       String   @map("creator_id")
  playbackPosition Int     @default(0) @map("playback_position")
  settings        Json     @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  creator      User              @relation("RoomCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
  audioFiles   AudioFile[]
  audioTracks  AudioTrack[]
  joinRequests JoinRequest[]
  compositions Composition[]
  sessions     Session[]
  messages     Message[]
  analytics    RoomAnalytics?
  interactions UserInteraction[]
  studioProject StudioProject?
  collaborationLog CollaborationLog?
}

model RoomParticipant {
  id         String   @id @default(uuid())
  roomId     String   @map("room_id")
  userId     String   @map("user_id")
  role       String   @default("participant")
  instruments Json    @default("[]")
  isOnline   Boolean  @default(false) @map("is_online")
  joinedAt   DateTime @default(now()) @map("joined_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_participants")
}

// --- Audio ---
model AudioFile {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  filename     String
  originalName String   @map("original_name")
  filePath     String   @map("file_path")
  fileSize     BigInt   @map("file_size")
  mimeType     String   @map("mime_type")
  duration     Decimal? @db.Decimal(10, 2)
  sampleRate   Int?     @map("sample_rate")
  channels     Int?
  bitRate      Int?     @map("bit_rate")
  format       String?
  isProcessed  Boolean  @default(false) @map("is_processed")
  isPublic     Boolean  @default(false) @map("is_public")
  roomId       String?  @map("room_id")
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room     Room?         @relation(fields: [roomId], references: [id], onDelete: SetNull)
  analysis AudioAnalysis?
  features AudioFeatures?
  interactions UserInteraction[]
}

model AudioAnalysis {
  id            String   @id @default(uuid())
  fileId        String   @unique @map("file_id")
  duration      Decimal? @db.Decimal(10, 2)
  sampleRate    Int?     @map("sample_rate")
  channels      Int?
  bitRate       Int?     @map("bit_rate")
  codec         String?
  format        String?
  size          BigInt?
  tempo         Decimal? @db.Decimal(6, 2)
  keySignature  String?  @map("key_signature")
  loudness      Decimal? @db.Decimal(8, 2)
  waveformData  Json?    @map("waveform_data")
  analyzedAt    DateTime @default(now()) @map("analyzed_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  file AudioFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("audio_analysis")
}

model AudioTrack {
  id                 String   @id @default(uuid())
  roomId             String   @map("room_id")
  uploaderId         String   @map("uploader_id")
  name               String
  artist             String?
  duration           String?
  filePath           String?  @map("file_path")
  waveform           Json?
  isCurrentlyPlaying Boolean  @default(false) @map("is_currently_playing")
  uploadedAt         DateTime @default(now()) @map("uploaded_at")
  metadata           Json     @default("{}")

  // Relations
  room     Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("audio_tracks")
}

// --- Join Requests ---
model JoinRequest {
  id        String            @id @default(uuid())
  roomId    String            @map("room_id")
  userId    String            @map("user_id")
  status    JoinRequestStatus @default(PENDING)
  message   String?
  response  String?
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("join_requests")
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// --- Compositions ---
model Composition {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  roomId      String   @map("room_id")
  title       String
  description String?
  filePath    String   @map("file_path")
  duration    Decimal? @db.Decimal(10, 2)
  fileSize    BigInt   @map("file_size")
  mixSettings Json     @default("{}") @map("mix_settings")
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("compositions")
}

// --- Sessions ---
model Session {
  id               String              @id @default(uuid())
  name             String
  roomId           String              @map("room_id")
  creatorId        String              @map("creator_id")
  settings         Json                @default("{}")
  state            Json                @default("{}")
  isActive         Boolean             @default(true) @map("is_active")
  lastActivity     DateTime            @default(now()) @map("last_activity")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relations
  room             Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  creator          User                @relation("SessionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants     SessionParticipant[]
}

model SessionParticipant {
  id          String   @id @default(uuid())
  sessionId   String   @map("session_id")
  userId      String   @map("user_id")
  role        String   @default("participant")
  joinedAt    DateTime @default(now()) @map("joined_at")
  isActive    Boolean  @default(true) @map("is_active")
  permissions Json     @default("{}")

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("session_participants")
}

// --- Messages ---
model Message {
  id        String      @id @default(uuid())
  roomId    String      @map("room_id")
  userId    String      @map("user_id")
  username  String
  message   String
  type      MessageType @default(TEXT)
  metadata  Json        @default("{}")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageType {
  TEXT
  SYSTEM
  FILE
  AUDIO
}

// --- User Session ---
model UserSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// --- Analytics, Recommendations, ML, etc. ---
model RecommendationCache {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation_cache")
}

model UserInteraction {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  roomId    String?  @map("room_id")
  audioFileId String? @map("audio_file_id")
  type      String
  data      Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room?     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  audioFile AudioFile? @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

  @@map("user_interactions")
}

model UserPreferences {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  preferences Json   @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model RoomAnalytics {
  id        String   @id @default(uuid())
  roomId    String   @unique @map("room_id")
  data      Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_analytics")
}

model StudioProject {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  roomId    String?  @unique @map("room_id")
  name      String
  description String?
  projectData Json    @map("project_data") // Store the openDAW project JSON
  projectBinary Bytes? @map("project_binary") // Store the .od binary file
  projectBundle Bytes? @map("project_bundle") // Store the .odb bundle file (with samples)
  version   String   @default("1.0")
  syncVersion Int     @default(0) @map("sync_version")
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  collaborationLog CollaborationLog?

  @@map("studio_projects")
}

model CollaborationLog {
  id        String   @id @default(uuid())
  roomId    String   @unique @map("room_id")
  studioProjectId String @unique @map("studio_project_id")
  syncLog   Bytes    @map("sync_log") // Store the .odsl sync log file
  lastSyncVersion Int @default(0) @map("last_sync_version")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  studioProject StudioProject @relation(fields: [studioProjectId], references: [id], onDelete: Cascade)

  @@map("collaboration_logs")
}

model AudioFeatures {
  id        String   @id @default(uuid())
  audioFileId String @unique @map("audio_file_id")
  features  Json    @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  audioFile AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

  @@map("audio_features")
}

// --- Collaboration System Models ---
model CollaborationProject {
  id        String   @id @map("id") // Use string ID to match collaboration system
  roomId    String?  @unique @map("room_id")
  name      String
  data      Bytes?   // Binary project data
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  boxOwnerships      BoxOwnership[]
  boxLocks          BoxLock[]
  collaborationSessions CollaborationUserSession[]

  @@map("collaboration_projects")
}

model BoxOwnership {
  projectId String @map("project_id")
  boxUuid   String @map("box_uuid")
  ownerId   String @map("owner_id")
  ownedAt   DateTime @default(now()) @map("owned_at")

  // Relations
  project CollaborationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, boxUuid])
  @@index([projectId])
  @@index([ownerId])
  @@map("box_ownership")
}

model BoxLock {
  projectId String @map("project_id")
  boxUuid   String @map("box_uuid")
  lockedBy  String @map("locked_by")
  lockedAt  DateTime @default(now()) @map("locked_at")
  expiresAt DateTime @map("expires_at")

  // Relations
  project CollaborationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, boxUuid])
  @@index([projectId])
  @@index([expiresAt])
  @@map("box_locks")
}

model CollaborationUserSession {
  id          String   @id @map("id") // Use string ID to match collaboration system
  projectId   String   @map("project_id")
  userId      String   @map("user_id")
  connectedAt DateTime @default(now()) @map("connected_at")
  lastSeen    DateTime @default(now()) @map("last_seen")

  // Relations
  project CollaborationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@map("collaboration_user_sessions")
}
