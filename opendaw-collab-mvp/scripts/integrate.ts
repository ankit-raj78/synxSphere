import * as fs from 'fs'
import * as path from 'path'

const OPENDAW_PATH = '/Users/ankitraj2/Documents/GitHub/synxSphere/openDAW'
const COLLAB_PATH = '/Users/ankitraj2/Documents/GitHub/synxSphere/opendaw-collab-mvp'

async function integrateCollaboration() {
    console.log('üöÄ Starting OpenDAW Collaboration Integration...')
    
    // 1. Create collaboration directory in OpenDAW
    const collaborationDir = path.join(OPENDAW_PATH, 'studio/src/collaboration')
    if (!fs.existsSync(collaborationDir)) {
        fs.mkdirSync(collaborationDir, { recursive: true })
        console.log('‚úÖ Created collaboration directory')
    }
    
    // 2. Copy collaboration files
    const filesToCopy = [
        'src/collaboration/CollaborativeOpfsAgent.ts',
        'src/database/DatabaseService.ts',
        'src/websocket/WSClient.ts',
        'src/websocket/MessageTypes.ts',
        'src/ui/OverlayManager.ts',
        'src/CollaborationManager.ts'
    ]
    
    for (const file of filesToCopy) {
        const sourcePath = path.join(COLLAB_PATH, file)
        const destPath = path.join(collaborationDir, path.basename(file))
        
        if (fs.existsSync(sourcePath)) {
            fs.copyFileSync(sourcePath, destPath)
            console.log(`‚úÖ Copied ${path.basename(file)}`)
        } else {
            console.log(`‚ùå Source file not found: ${file}`)
        }
    }
    
    // 3. Backup and modify agents.ts
    const agentsPath = path.join(OPENDAW_PATH, 'studio/src/service/agents.ts')
    const backupPath = `${agentsPath}.backup`
    
    if (!fs.existsSync(backupPath)) {
        fs.copyFileSync(agentsPath, backupPath)
        console.log('‚úÖ Backed up original agents.ts')
    }
    
    // 4. Read current agents.ts
    const currentAgents = fs.readFileSync(agentsPath, 'utf8')
    
    // 5. Create new agents.ts with collaboration
    const newAgentsContent = createCollaborativeAgents(currentAgents)
    fs.writeFileSync(agentsPath, newAgentsContent)
    console.log('‚úÖ Updated agents.ts with collaboration features')
    
    // 6. Copy CSS files
    const cssDir = path.join(OPENDAW_PATH, 'studio/src/assets/collaboration')
    if (!fs.existsSync(cssDir)) {
        fs.mkdirSync(cssDir, { recursive: true })
    }
    
    const cssSource = path.join(COLLAB_PATH, 'src/ui/styles/collaboration.css')
    const cssDest = path.join(cssDir, 'collaboration.css')
    
    if (fs.existsSync(cssSource)) {
        fs.copyFileSync(cssSource, cssDest)
        console.log('‚úÖ Copied collaboration CSS')
    }
    
    console.log('')
    console.log('üéâ Integration complete!')
    console.log('üëâ Restart OpenDAW server to see collaboration features')
    console.log('')
    console.log('üß™ Test URLs:')
    console.log('Local:')
    console.log('User 1: https://localhost:8080/?projectId=test&userId=alice&collaborative=true&userName=Alice')
    console.log('User 2: https://localhost:8080/?projectId=test&userId=bob&collaborative=true&userName=Bob')
    console.log('')
    console.log('AWS Production:')
    console.log('User 1: https://app.synctown.ai:8080/?projectId=test&userId=alice&collaborative=true&userName=Alice')
    console.log('User 2: https://app.synctown.ai:8080/?projectId=test&userId=bob&collaborative=true&userName=Bob')
}

function createCollaborativeAgents(originalContent: string): string {
    return `// OpenDAW Agents with Collaboration Integration
// Generated by synxSphere collaboration integration

import {FloatArray, int, Procedure} from "std"
import WorkerUrl from "../worker/agents.ts?worker&url"
import {Entry, OpfsProtocol, PeakProtocol} from "fusion"
import {Communicator, Messenger} from "runtime"

// Import collaboration components
import { CollaborationManager } from '../collaboration/CollaborationManager'

const messenger = Messenger.for(new Worker(WorkerUrl, {type: "module"}))

export const PeakAgent = Communicator.sender<PeakProtocol>(messenger.channel("peaks"),
    router => new class implements PeakProtocol {
        async generateAsync(
            progress: Procedure<number>,
            shifts: Uint8Array,
            frames: ReadonlyArray<FloatArray>,
            numFrames: int,
            numChannels: int): Promise<ArrayBufferLike> {
            return router.dispatchAndReturn(this.generateAsync, progress, shifts, frames, numFrames, numChannels)
        }
    })

// Create the base OPFS agent
const baseOpfsAgent = Communicator.sender<OpfsProtocol>(messenger.channel("opfs"),
    router => new class implements OpfsProtocol {
        write(path: string, data: Uint8Array): Promise<void> {return router.dispatchAndReturn(this.write, path, data)}
        read(path: string): Promise<Uint8Array> {return router.dispatchAndReturn(this.read, path)}
        delete(path: string): Promise<void> {return router.dispatchAndReturn(this.delete, path)}
        list(path: string): Promise<ReadonlyArray<Entry>> {return router.dispatchAndReturn(this.list, path)}
    })

// Collaboration Integration
let collaborationManager: CollaborationManager | null = null

// Check for collaboration mode
const urlParams = new URLSearchParams(window.location.search)
const projectId = urlParams.get('projectId')
const userId = urlParams.get('userId')
const userName = urlParams.get('userName') || userId
const isCollaborative = urlParams.get('collaborative') === 'true'

console.log('üîç OpenDAW Collaboration Check:', { projectId, userId, isCollaborative })

if (isCollaborative && projectId && userId) {
    console.log('ü§ù Initializing collaboration mode...')
    
    try {
        // Initialize collaboration manager
        collaborationManager = new CollaborationManager({
            projectId,
            userId,
            userName: userName || userId,
            wsUrl: 'ws://localhost:3003',
            dbUrl: 'postgresql://opendaw:collaboration@localhost:5433/opendaw_collab'
        })
        
        // Initialize collaboration asynchronously
        collaborationManager.initialize(baseOpfsAgent).then(() => {
            console.log('‚úÖ Collaboration initialized successfully')
            
            // Add visual indicators
            const style = document.createElement('style')
            style.textContent = \`
                .collaboration-active {
                    border-top: 3px solid #10b981 !important;
                }
                .collaboration-panel {
                    position: fixed;
                    top: 10px;
                    right: 10px;
                    background: rgba(0, 0, 0, 0.9);
                    color: white;
                    padding: 12px;
                    border-radius: 8px;
                    font-family: system-ui, -apple-system, sans-serif;
                    font-size: 12px;
                    z-index: 10000;
                    border: 1px solid #10b981;
                }
                .collaboration-panel h4 {
                    margin: 0 0 8px 0;
                    color: #10b981;
                    font-size: 14px;
                }
                .collab-user {
                    display: flex;
                    align-items: center;
                    gap: 6px;
                    margin: 4px 0;
                }
                .collab-status {
                    width: 8px;
                    height: 8px;
                    border-radius: 50%;
                    background: #10b981;
                }
            \`
            document.head.appendChild(style)
            
            // Add collaboration panel to UI
            const panel = document.createElement('div')
            panel.className = 'collaboration-panel'
            panel.innerHTML = \`
                <h4>ü§ù Collaboration Active</h4>
                <div class="collab-user">
                    <div class="collab-status"></div>
                    <span>\${userName || userId}</span>
                </div>
                <div>Project: \${projectId}</div>
                <div id="online-users">Connected: 1</div>
            \`
            document.body.appendChild(panel)
            
        }).catch(error => {
            console.error('‚ùå Failed to initialize collaboration:', error)
            console.log('üîÑ Falling back to local mode')
        })
        
    } catch (error) {
        console.error('‚ùå Collaboration setup failed:', error)
        console.log('üîÑ Using local mode')
    }
}

// Export the OPFS agent (will be collaborative if initialized, otherwise base agent)
export const OpfsAgent = collaborationManager?.isActive() 
    ? collaborationManager.collaborativeAgent 
    : baseOpfsAgent
`
}

// Run integration
integrateCollaboration().catch(console.error)
