# OpenDAW Collaboration System - Production Build Setup
# 
# This docker-compose file uses production builds for performance:
# - Production builds for all services
# - Optimized assets and bundling
# - Volume mounts for source code updates
# - Development database access
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d
#   docker-compose -f docker-compose.dev.yml logs -f

services:
  # Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: opendaw_postgres_dev
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: opendaw
      POSTGRES_PASSWORD: collaboration
      POSTGRES_DB: opendaw_collab
    ports:
      - "5434:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./opendaw-collab-mvp/src/database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opendaw"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (same as production)
  redis:
    image: redis:7-alpine
    container_name: opendaw_redis_dev
    env_file:
      - .env.docker
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data

  # Collaboration Server (production build)
  collaboration:
    image: node:18-alpine
    container_name: opendaw_collaboration_dev
    working_dir: /app
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://opendaw:collaboration@postgres:5432/opendaw_collab
      - REDIS_URL=redis://redis:6379
      - WS_PORT=3005
      - HTTP_PORT=3003
      - PGPASSWORD=collaboration
    ports:
      - "3004:3003"
      - "3005:3005"
    volumes:
      - ./opendaw-collab-mvp:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: sh -c "apk add --no-cache postgresql-client && chmod +x /app/wait-for-postgres.sh && /app/wait-for-postgres.sh postgres 5432 && npm install --include=dev && npx tsc && node dist/server/index.js"
    restart: unless-stopped

  # SynxSphere Dashboard (production build)
  synxsphere:
    image: node:18-alpine
    container_name: opendaw_synxsphere_dev
    working_dir: /app
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://opendaw:collaboration@postgres:5432/opendaw_collab
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=opendaw
      - POSTGRES_PASSWORD=collaboration
      - POSTGRES_DB=opendaw_collab
    ports:
      - "8000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - collaboration
    command: sh -c "apk add --no-cache ffmpeg && npm install --include=dev && npm run build && npm start"
    restart: unless-stopped

  # OpenDAW Studio (production build)
  opendaw:
    image: node:18-alpine
    container_name: opendaw_studio_dev
    working_dir: /app
    environment:
      - NODE_ENV=development
      - NODE_OPTIONS=--experimental-global-webcrypto
      - VITE_API_URL=https://app.synctown.ai:8443/api
      - VITE_WS_URL=wss://app.synctown.ai:8443/ws
      - VITE_SYNXSPHERE_URL=https://app.synctown.ai:8443
      - VITE_COLLABORATION_WS_URL=wss://app.synctown.ai:8443/ws
      - VITE_COLLABORATION_HTTP_URL=http://collaboration:3003
      - DATABASE_URL=postgresql://opendaw:collaboration@postgres:5432/opendaw_collab
      - REDIS_URL=redis://redis:6379
      - WS_PORT=3005
      - HTTP_PORT=3003
    ports:
      - "8080:8080"
    volumes:
      - ./openDAW:/app
      - /app/node_modules
      - ./opendaw-collab-mvp:/app/opendaw-collab-mvp
      - ./localhost.pem:/app/localhost.pem
      - ./localhost-key.pem:/app/localhost-key.pem
    depends_on:
      - collaboration
    command: >
      sh -c "
        npm install --include=dev &&
        cd studio &&
        npm install &&
        npx vite build --mode production &&
        node server.js
      "
    restart: unless-stopped

  # HTTPS proxy for collaboration server
  collaboration-proxy:
    image: nginx:alpine
    container_name: opendaw_collaboration_proxy_dev
    ports:
      - "8443:8443"
    volumes:
      - ./nginx/collaboration-proxy.conf:/etc/nginx/conf.d/default.conf
      - ./openDAW/localhost.pem:/etc/ssl/certs/localhost.pem
      - ./openDAW/localhost-key.pem:/etc/ssl/private/localhost-key.pem
    depends_on:
      - collaboration
    restart: unless-stopped

  # Audio Analysis Service (production build)
  audio-service:
    image: node:18-alpine
    container_name: opendaw_audio_service_dev
    working_dir: /app
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - SERVICE_PORT=3006
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=opendaw_collab
      - POSTGRES_USER=opendaw
      - POSTGRES_PASSWORD=collaboration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3006:3006"
    volumes:
      - ./services/audio-service:/app
      - /app/node_modules
      - ./uploads:/app/uploads  # Mount uploads directory
      - ./public:/app/public    # Mount public directory for room uploads
    depends_on:
      - postgres
      - redis
    command: sh -c "apk add --no-cache ffmpeg && npm install --include=dev && npm install -g ts-node && ts-node --transpile-only src/index-standalone.ts"
    restart: unless-stopped

  # Development tools
  adminer:
    image: adminer:latest
    container_name: opendaw_adminer_dev
    env_file:
      - .env.docker
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  default:
    name: opendaw_dev_network
